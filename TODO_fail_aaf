Running fine comparison :

AAFInfo --aaf-clips /media/agfline/0CA0-EF67/AAF/E2R_52min/224E2R190008_ENQUETES_DE_REGION_N32_LA_SECHERESSE_UNE_FATALITE.aaf


_abSig              : 0xe11ab1a1e011cfd0
_clsId              : { 0x0d010201 0x0200 0x0000 { 0x06 0x0e 0x2b 0x34 0x03 0x02 0x01 0x01 } }
 version            : 62.4 ( 0x003e 0x0004 )
_uByteOrder         : little-endian ( 0xfffe )
_uSectorShift       : 12 (4096 bytes sectors)
_uMiniSectorShift   : 6 (64 bytes mini-sectors)
_usReserved0        : 0x00
_ulReserved1        : 0x0000
_csectDir           : 675
_csectFat           : 441
_sectDirStart       : 1
_signature          : 0
_ulMiniSectorCutoff : 4096
_sectMiniFatStart   : 449921
_csectMiniFat       : 24
_sectDifStart       : 111597
_csectDif           : 1


--------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------


valgrind --track-origins=yes --leak-check=full ./bin/AAFInfo --cfb-header /media/agfline/0CA0-EF67/AAF/E2R_Sujet/3556049_E2R_RETENUES_D_EAU_DEUX_SEVRES\ PAD\ 2T.aaf
==29679== Memcheck, a memory error detector
==29679== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==29679== Using Valgrind-3.14.0 and LibVEX; rerun with -h for copyright info
==29679== Command: ./bin/AAFInfo --cfb-header /media/agfline/0CA0-EF67/AAF/E2R_Sujet/3556049_E2R_RETENUES_D_EAU_DEUX_SEVRES\ PAD\ 2T.aaf
==29679==


_abSig              : 0xe11ab1a1e011cfd0
_clsId              : { 0x0d010201 0x0200 0x0000 { 0x06 0x0e 0x2b 0x34 0x03 0x02 0x01 0x01 } }
 version            : 62.4 ( 0x003e 0x0004 )
_uByteOrder         : little-endian ( 0xfffe )
_uSectorShift       : 12 (4096 bytes sectors)
_uMiniSectorShift   : 6 (64 bytes mini-sectors)
_usReserved0        : 0x00
_ulReserved1        : 0x0000
_csectDir           : 1075
_csectFat           : 1347
_sectDirStart       : 1
_signature          : 0
_ulMiniSectorCutoff : 4096
_sectMiniFatStart   : 132707
_csectMiniFat       : 38
_sectDifStart       : 111536
_csectDif           : 2

WARNING LibCFB/LibCFB.c:978 in cfb_retrieveDiFAT() : Incorrect end of DiFAT Chain 0x0011afea (1159146)
WARNING LibCFB/LibCFB.c:1030 in cfb_retrieveFAT() : Got a NULL FAT index in the DiFAT @ 1140, should be CFB_FREE_SECT.
WARNING LibCFB/LibCFB.c:1030 in cfb_retrieveFAT() : Got a NULL FAT index in the DiFAT @ 1143, should be CFB_FREE_SECT.
WARNING LibCFB/LibCFB.c:1030 in cfb_retrieveFAT() : Got a NULL FAT index in the DiFAT @ 1160, should be CFB_FREE_SECT.
WARNING LibCFB/LibCFB.c:1030 in cfb_retrieveFAT() : Got a NULL FAT index in the DiFAT @ 1162, should be CFB_FREE_SECT.
WARNING LibCFB/LibCFB.c:1030 in cfb_retrieveFAT() : Got a NULL FAT index in the DiFAT @ 1163, should be CFB_FREE_SECT.
WARNING LibCFB/LibCFB.c:1030 in cfb_retrieveFAT() : Got a NULL FAT index in the DiFAT @ 1180, should be CFB_FREE_SECT.
WARNING LibCFB/LibCFB.c:1030 in cfb_retrieveFAT() : Got a NULL FAT index in the DiFAT @ 1182, should be CFB_FREE_SECT.
WARNING LibCFB/LibCFB.c:1030 in cfb_retrieveFAT() : Got a NULL FAT index in the DiFAT @ 1183, should be CFB_FREE_SECT.
WARNING LibCFB/LibCFB.c:1030 in cfb_retrieveFAT() : Got a NULL FAT index in the DiFAT @ 1240, should be CFB_FREE_SECT.
WARNING LibCFB/LibCFB.c:1030 in cfb_retrieveFAT() : Got a NULL FAT index in the DiFAT @ 1242, should be CFB_FREE_SECT.
WARNING LibCFB/LibCFB.c:1030 in cfb_retrieveFAT() : Got a NULL FAT index in the DiFAT @ 1243, should be CFB_FREE_SECT.
WARNING LibCFB/LibCFB.c:1030 in cfb_retrieveFAT() : Got a NULL FAT index in the DiFAT @ 1280, should be CFB_FREE_SECT.
WARNING LibCFB/LibCFB.c:1030 in cfb_retrieveFAT() : Got a NULL FAT index in the DiFAT @ 1282, should be CFB_FREE_SECT.
WARNING LibCFB/LibCFB.c:1030 in cfb_retrieveFAT() : Got a NULL FAT index in the DiFAT @ 1283, should be CFB_FREE_SECT.
WARNING LibCFB/LibCFB.c:1030 in cfb_retrieveFAT() : Got a NULL FAT index in the DiFAT @ 1338, should be CFB_FREE_SECT.
WARNING LibCFB/LibCFB.c:1030 in cfb_retrieveFAT() : Got a NULL FAT index in the DiFAT @ 1340, should be CFB_FREE_SECT.
WARNING LibCFB/LibCFB.c:1030 in cfb_retrieveFAT() : Got a NULL FAT index in the DiFAT @ 1343, should be CFB_FREE_SECT.
__ERROR LibCFB/LibCFB.c:1486 in getNodeCount() : index (1542119524) > FAT size (1379328).
__ERROR LibCFB/LibCFB.c:591 in cfb_getSector() : Asking for an out of range FAT sector @ index 1542119524 (max FAT index is 1379328)
==29679== Invalid read of size 4
==29679==    at 0x10DDFB: cfb_getMiniSector (LibCFB.c:675)
==29679==    by 0x10DFE2: cfb_getStream (LibCFB.c:735)
==29679==    by 0x10FA08: getNodeProperties (AAFCore.c:2093)
==29679==    by 0x1114F9: retrieveObjectTree (AAFCore.c:1339)
==29679==    by 0x1114F9: aaf_load_file (AAFCore.c:479)
==29679==    by 0x10A599: main (AAFInfo.c:279)
==29679==  Address 0x405865034 is not stack'd, malloc'd or (recently) free'd
==29679==
==29679==
==29679== Process terminating with default action of signal 11 (SIGSEGV)
==29679==  Access not within mapped region at address 0x405865034
==29679==    at 0x10DDFB: cfb_getMiniSector (LibCFB.c:675)
==29679==    by 0x10DFE2: cfb_getStream (LibCFB.c:735)
==29679==    by 0x10FA08: getNodeProperties (AAFCore.c:2093)
==29679==    by 0x1114F9: retrieveObjectTree (AAFCore.c:1339)
==29679==    by 0x1114F9: aaf_load_file (AAFCore.c:479)
==29679==    by 0x10A599: main (AAFInfo.c:279)
==29679==  If you believe this happened as a result of a stack
==29679==  overflow in your program's main thread (unlikely but
==29679==  possible), you can try to increase the size of the
==29679==  main thread stack using the --main-stacksize= flag.
==29679==  The main thread stack size used in this run was 8388608.
==29679==
==29679== HEAP SUMMARY:
==29679==     in use at exit: 5,791,096 bytes in 409 blocks
==29679==   total heap usage: 1,759 allocs, 1,350 frees, 11,191,085 bytes allocated
==29679==
==29679== 64 bytes in 1 blocks are definitely lost in loss record 378 of 390
==29679==    at 0x4837B65: calloc (vg_replace_malloc.c:752)
==29679==    by 0x10DDB0: cfb_getMiniSector (LibCFB.c:656)
==29679==    by 0x10DFE2: cfb_getStream (LibCFB.c:735)
==29679==    by 0x10FA08: getNodeProperties (AAFCore.c:2093)
==29679==    by 0x1114F9: retrieveObjectTree (AAFCore.c:1339)
==29679==    by 0x1114F9: aaf_load_file (AAFCore.c:479)
==29679==    by 0x10A599: main (AAFInfo.c:279)
==29679==
==29679== LEAK SUMMARY:
==29679==    definitely lost: 64 bytes in 1 blocks
==29679==    indirectly lost: 0 bytes in 0 blocks
==29679==      possibly lost: 0 bytes in 0 blocks
==29679==    still reachable: 5,791,032 bytes in 408 blocks
==29679==         suppressed: 0 bytes in 0 blocks
==29679== Reachable blocks (those to which a pointer was found) are not shown.
==29679== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==29679==
==29679== For counts of detected and suppressed errors, rerun with: -v
==29679== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Segmentation fault
